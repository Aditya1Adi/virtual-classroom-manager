# -*- coding: utf-8 -*-
# """Untitled12.ipynb

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/1RQVVD6ak_6zz4lm3nfpwUsFcndT0YbJs
# """


import logging
from datetime import datetime

class Classroom:
    def __init__(self, name):
        self.name = name
        self.students = []
        self.assignments = []

class Student:
    def __init__(self, student_id):
        self.student_id = student_id
        self.assignments = []

class Assignment:
    def __init__(self, name, deadline):
        self.name = name
        self.deadline = deadline
        self.submitted = False

classrooms = []

logging.basicConfig(filename='virtual_classroom.log', level=logging.INFO, format='%(asctime)s - %(message)s')

def add_classroom(class_name):
    classroom = Classroom(class_name)
    classrooms.append(classroom)
    print(f"Classroom Addition: 'Classroom {class_name} has been created.'")
    logging.info(f"Classroom Addition: 'Classroom {class_name} has been created.'")

def list_classrooms():
    print("List of Classrooms:")
    for classroom in classrooms:
        print(classroom.name)

def remove_classroom(class_name):
    for classroom in classrooms:
        if classroom.name == class_name:
            classrooms.remove(classroom)
            print(f"Classroom Removal: 'Classroom {class_name} has been removed.'")
            logging.info(f"Classroom Removal: 'Classroom {class_name} has been removed.'")
            return
    print(f"Classroom not found: {class_name}")
    logging.error(f"Classroom not found: {class_name}")

def add_student(student_id, class_name):
    for classroom in classrooms:
        if classroom.name == class_name:
            student = Student(student_id)
            classroom.students.append(student)
            print(f"Student Addition: 'Student {student_id} has been enrolled in {class_name}.'")
            logging.info(f"Student Addition: 'Student {student_id} has been enrolled in {class_name}.'")
            return
    print(f"Classroom not found: {class_name}")
    logging.error(f"Classroom not found: {class_name}")


def list_students_in_class(class_name):
    for classroom in classrooms:
        if classroom.name == class_name:
            print(f"Students in {class_name}:")
            for student in classroom.students:
                print(student.student_id)
            return
    print(f"Classroom not found: {class_name}")
    logging.error(f"Classroom not found: {class_name}")

def schedule_assignment(class_name, assignment_details):
    for classroom in classrooms:
        if classroom.name == class_name:
            try:
                assignment_name, deadline = assignment_details.split(',')
                deadline_date = datetime.strptime(deadline.strip(), '%Y-%m-%d %H:%M:%S')
                assignment = Assignment(assignment_name.strip(), deadline_date)
                classroom.assignments.append(assignment)
                print(f"Assignment Scheduled: 'Assignment for {class_name} has been scheduled.'")
                logging.info(f"Assignment Scheduled: 'Assignment for {class_name} has been scheduled.'")
            except ValueError:
                print("Invalid format. Please use 'assignment_name, deadline (YYYY-MM-DD HH:MM:SS)'.")
                logging.error("Invalid format in schedule_assignment.")
            return
    print(f"Classroom not found: {class_name}")
    logging.error(f"Classroom not found: {class_name}")

def submit_assignment(student_id, class_name, assignment_details):
    for classroom in classrooms:
        if classroom.name == class_name:
            for student in classroom.students:
                if student.student_id == student_id:
                    for assignment in classroom.assignments:
                        if assignment.name == assignment_details:
                            if not assignment.submitted:
                                now = datetime.now()
                                if now <= assignment.deadline:
                                    assignment.submitted = True
                                    print(f"Assignment Submission: 'Assignment submitted by Student {student_id} in {class_name}.'")
                                    logging.info(f"Assignment Submission: 'Assignment submitted by Student {student_id} in {class_name}.'")
                                else:
                                    print("Assignment deadline has passed.")
                                    logging.error("Assignment deadline has passed in submit_assignment.")
                            else:
                                print("Assignment already submitted.")
                                logging.error("Assignment already submitted in submit_assignment.")
                            return
                    print(f"Assignment not found: {assignment_details}")
                    logging.error(f"Assignment not found: {assignment_details}")
                    return
            print(f"Student not found: {student_id}")
            logging.error(f"Student not found: {student_id}")
            return
    print(f"Classroom not found: {class_name}")
    logging.error(f"Classroom not found: {class_name}")

while True:
    print("\nVirtual Classroom Manager")
    print("Type help to view commands")

    choice = input("Enter a command: ")

    if choice=='help':
        print("add_classroom")
        print("list_classrooms")
        print("remove_classroom")
        print("list_students_in_class")
        print("add_student")
        print("schedule_assignment")
        print("submit_assignment")
        print("quit")

    elif choice == "add_classroom":
        class_name = input("Enter the classroom name: ")
        add_classroom(class_name)
    elif choice == "list_classrooms":
        list_classrooms()
    elif choice == "remove_classroom":
        class_name = input("Enter the classroom name to remove: ")
        remove_classroom(class_name)
    elif choice == "list_students_in_class":
        class_name = input("Enter the classroom name to list students: ")
        list_students_in_class(class_name)
    elif choice ==  "add_student":
        student_id = input("Enter the student ID: ")
        class_name = input("Enter the classroom name: ")
        add_student(student_id, class_name)
    elif choice == "schedule_assignment":
        class_name = input("Enter the classroom name: ")
        assignment_details = input("Enter the assignment details (assignment_name, deadline YYYY-MM-DD HH:MM:SS): ")
        schedule_assignment(class_name, assignment_details)
    elif choice == "submit_assignment":
        student_id = input("Enter the student ID: ")
        class_name = input("Enter the classroom name: ")
        assignment_details = input("Enter the assignment name: ")
        submit_assignment(student_id, class_name, assignment_details)
    elif choice == "quit":
        break
    else:
        print("Invalid choice. Please try again.")